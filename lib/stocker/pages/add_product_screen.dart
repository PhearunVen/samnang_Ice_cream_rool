import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:provider/provider.dart';
import 'package:samnang_ice_cream_roll/stocker/model/product_model.dart';
import 'package:samnang_ice_cream_roll/stocker/service/product_provider.dart';
import 'package:samnang_ice_cream_roll/storage/domain/storage_repo.dart';

class AddProductScreen extends StatefulWidget {
  const AddProductScreen({super.key});

  @override
  _AddProductScreenState createState() => _AddProductScreenState();
}

class _AddProductScreenState extends State<AddProductScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _priceController = TextEditingController();
  final _stockController = TextEditingController();
  String _selectedCategory = 'ផ្លែឈើ'; // Fruits
  String _selectedUnitType = 'គីឡូ'; // Kilogram
  File? _imageFile;
  String? _imageUrl;
  bool _isLoading = false;

  final List<String> _categories = [
    'ផ្លែឈើ', // Fruits
    'នំ', // Cakes
    'syrupe', // Syrup
    'ទឹកដោះគោស្រស់', // Fresh Milk
    'ទឹកដោះគោកំប៉ុង', // Canned Milk
    'ទឹកដោះគោខាប់', // Condensed Milk
    'កែវជ័រ', // Jelly Cups
  ];

  final List<String> _unitTypes = [
    'កញ្ចប់', // Pack
    'កេស', // Case
    'ធុង', // Barrel
    'ដប', // Bottle
    'កំប៉ុង', // Can
    'ដុំ', // Piece
    'គីឡូ', // Kilogram
  ];

  Future<void> _pickImage() async {
    final pickedFile =
        await ImagePicker().pickImage(source: ImageSource.gallery);

    setState(() {
      if (pickedFile != null) {
        _imageFile = File(pickedFile.path);
        print('Image selected: ${_imageFile!.path}'); // Debug print
      }
    });
  }

  Future<void> _uploadImage() async {
    if (_imageFile == null) return;

    setState(() => _isLoading = true);

    try {
      final fileName = DateTime.now().millisecondsSinceEpoch.toString();
      final storageRepo = Provider.of<StorageRepo>(context, listen: false);
      _imageUrl =
          await storageRepo.uploadfileImageMobile(_imageFile!.path, fileName);
      //  print('Image uploaded to: $_imageUrl'); // Debug print
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to upload image: $e')),
      );
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _addProduct() async {
    if (_formKey.currentState!.validate() && _imageFile != null) {
      setState(() => _isLoading = true);

      try {
        await _uploadImage(); // Upload image and get URL

        if (_imageUrl != null) {
          final product = Product(
            id: '', // ID will be generated by the provider
            name: _nameController.text,
            price: double.parse(_priceController.text),
            stock: double.parse(_stockController.text),
            category: _selectedCategory,
            unitType: _selectedUnitType,
            imageUrl: _imageUrl!, // Assign the image URL
          );

          final productProvider =
              Provider.of<ProductProvider>(context, listen: false);
          await productProvider.addProduct(product);

          print('Product added: $product'); // Debug print
          Navigator.pop(context); // Return to previous screen
        }
      } catch (e) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to add product: $e')),
        );
      } finally {
        setState(() => _isLoading = false);
      }
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Please select an image')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Add Product'),
      ),
      body: _isLoading
          ? Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              scrollDirection: Axis.vertical,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Form(
                  key: _formKey,
                  child: Column(
                    children: [
                      // Image Picker
                      GestureDetector(
                        onTap: _pickImage,
                        child: _imageFile == null
                            ? Column(
                                children: [
                                  Icon(Icons.add_a_photo, size: 50),
                                  Text('Tap to add an image'),
                                ],
                              )
                            : Image.file(_imageFile!,
                                height: 150, width: 150, fit: BoxFit.cover),
                      ),
                      SizedBox(height: 16),

                      // Product Name Field
                      TextFormField(
                        controller: _nameController,
                        decoration: InputDecoration(labelText: 'Product Name'),
                        validator: (value) => value == null || value.isEmpty
                            ? 'Please enter a product name'
                            : null,
                      ),
                      SizedBox(height: 16),

                      // Price Field
                      TextFormField(
                        controller: _priceController,
                        decoration:
                            InputDecoration(labelText: 'Price per Unit'),
                        keyboardType: TextInputType.number,
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Please enter a price';
                          }
                          final price = double.tryParse(value);
                          if (price == null || price < 0) {
                            return 'Please enter a valid price';
                          }
                          return null;
                        },
                      ),
                      SizedBox(height: 16),

                      // Stock Quantity Field
                      TextFormField(
                        controller: _stockController,
                        decoration:
                            InputDecoration(labelText: 'Stock Quantity'),
                        keyboardType: TextInputType.number,
                        validator: (value) {
                          if (value == null || value.isEmpty) {
                            return 'Please enter a stock quantity';
                          }
                          final stock = double.tryParse(value);
                          if (stock == null || stock < 0) {
                            return 'Please enter a valid stock quantity';
                          }
                          return null;
                        },
                      ),
                      SizedBox(height: 16),

                      // Category Dropdown
                      DropdownButtonFormField<String>(
                        value: _selectedCategory,
                        decoration: InputDecoration(labelText: 'Category'),
                        items: _categories.map((category) {
                          return DropdownMenuItem(
                            value: category,
                            child: Text(category),
                          );
                        }).toList(),
                        onChanged: (value) {
                          setState(() => _selectedCategory = value!);
                        },
                      ),
                      SizedBox(height: 16),

                      // Unit Type Dropdown
                      DropdownButtonFormField<String>(
                        value: _selectedUnitType,
                        decoration: InputDecoration(labelText: 'Unit Type'),
                        items: _unitTypes.map((unit) {
                          return DropdownMenuItem(
                            value: unit,
                            child: Text(unit),
                          );
                        }).toList(),
                        onChanged: (value) {
                          setState(() => _selectedUnitType = value!);
                        },
                      ),
                      SizedBox(height: 20),

                      // Add Product Button
                      ElevatedButton(
                        onPressed: _isLoading ? null : _addProduct,
                        child: Text(
                          'Add Product',
                          style: TextStyle(
                            color: Colors.black,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
    );
  }
}
